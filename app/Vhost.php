<?php
namespace VhostManager;

class Vhost
{
    protected $port = 80;
    protected $serverName = "";
    protected $serverAlias = "";
    protected $serverAdmin = "";
    protected $documentRoot = "";
    /** @var ProxyPass */
    protected $proxyPass;
    /** @var ProxyPassReverse */
    protected $proxyPassReverse;
    
    public function __toString()
    {
        return $this->build();
    }
    
    public function save($force = true)
    {
        //todo: Check if serverName.conf already exists
        //todo: Overwrite if force = true
    }
    
    public function activate()
    {
        //todo: Create Symlink to activate the site
        //todo: Reload Apache2 service
    }
    
    /**
     * @return string
     */
    public function build() {
        $proxy = false;
        $serverName = "";
        $serverAlias = "";
        $serverAdmin = "";
        $documentRoot = "";
        $proxySettings = "";
        $proxyPass = "";
        $proxyPassReverse = "";
        
        
        if (!empty($this->serverName)) {
            $serverName = "ServerName " . $this->serverName;
        }
        if (!empty($this->serverAlias)) {
            $serverAlias = "ServerAlias " . $this->serverAlias;
        }
        if (!empty($this->serverAdmin)) {
            $serverAdmin = "ServerAdmin " . $this->serverAdmin;
        }
        if (!empty($this->documentRoot)) {
            $documentRoot = "documentRoot " . $this->documentRoot;
        }
        if (!empty($this->proxyPass)) {
            $proxyPass = sprintf('ProxyPass "%s" "%s"',
                $this->proxyPass->getRedirectFrom(),
                $this->proxyPass->getRedirectTo()
            );
        }
        if (!empty($this->proxyPassReverse)) {
            $proxyPassReverse = sprintf('ProxyPassReverse "%s" "%s"',
                $this->proxyPass->getRedirectFrom(),
                $this->proxyPass->getRedirectTo()
            );
        }
        
        if ($proxySettings) {
            sprintf('
            DefaultType none
            RewriteEngine on
            AllowEncodedSlashes on
            RequestHeader set X-Forwarded-Proto "http"
            RewriteCond %{QUERY_STRING} transport=polling
            RewriteRule /(.*)$ http://%s/$1 [P]
            ProxyRequests off',
            $this->proxyPass->getRedirectTo()
            );
        }
        
        $vhost = sprintf('
            <VirtualHost *:%s>
                # Generated by Chakratos\VHost-Manager
                %s
                %s
                %s
                %s
                %s
                %s
            </VirtualHost>',
            $this->port,
            $serverName,
            $serverAlias,
            $serverAdmin,
            $documentRoot,
            $proxyPass,
            $proxyPassReverse
        );
        
        return $vhost;
    }
    
    /**
     * @return string
     */
    public function getServerAdmin(): string
    {
        return $this->serverAdmin;
    }
    
    /**
     * @param string $serverAdmin
     * @return Vhost
     */
    public function setServerAdmin(string $serverAdmin): Vhost
    {
        $this->serverAdmin = $serverAdmin;
        
        return $this;
    }
    
    /**
     * @return string
     */
    public function getDocumentRoot(): string
    {
        return $this->documentRoot;
    }
    
    /**
     * @param string $documentRoot
     * @return Vhost
     */
    public function setDocumentRoot(string $documentRoot): Vhost
    {
        $this->documentRoot = $documentRoot;
        
        return $this;
    }
    
    /**
     * @return int
     */
    public function getPort(): int
    {
        return $this->port;
    }
    
    /**
     * @param int $port
     * @return Vhost
     */
    public function setPort(int $port): Vhost
    {
        $this->port = $port;
        
        return $this;
    }
    
    /**
     * @return string
     */
    public function getServerName(): string
    {
        return $this->serverName;
    }
    
    /**
     * @param string $serverName
     * @return Vhost
     */
    public function setServerName(string $serverName): Vhost
    {
        $this->serverName = $serverName;
        
        return $this;
    }
    
    /**
     * @return string
     */
    public function getServerAlias(): string
    {
        return $this->serverAlias;
    }
    
    /**
     * @param string $serverAlias
     * @return Vhost
     */
    public function setServerAlias(string $serverAlias): Vhost
    {
        $this->serverAlias = $serverAlias;
        
        return $this;
    }
    
    /**
     * @return ProxyPass
     */
    public function getProxyPass(): ProxyPass
    {
        return $this->proxyPass;
    }
    
    /**
     * @param ProxyPass $proxyPass
     * @return Vhost
     */
    public function setProxyPass(ProxyPass $proxyPass): Vhost
    {
        if (empty($proxyPass->getRedirectTo()) || empty($proxyPass->getRedirectFrom())) {
            throw new \InvalidArgumentException('ProxyPass needs to be filled!');
        }
        $this->proxyPass = $proxyPass;
        
        return $this;
    }
    
    /**
     * @return ProxyPassReverse
     */
    public function getProxyPassReverse(): ProxyPassReverse
    {
        return $this->proxyPassReverse;
    }
    
    /**
     * @param ProxyPassReverse $proxyPassReverse
     * @return Vhost
     * @throws \InvalidArgumentException
     */
    public function setProxyPassReverse(ProxyPassReverse $proxyPassReverse): Vhost
    {
        if (empty($proxyPassReverse->getRedirectTo()) || empty($proxyPassReverse->getRedirectFrom())) {
            throw new \InvalidArgumentException('ProxyPassReverse needs to be filled!');
        }
        $this->proxyPassReverse = $proxyPassReverse;
        
        return $this;
    }
    
    
}
